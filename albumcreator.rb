# -*- coding: utf-8 -*-
# Die Idee stammt von [[http://www.lostfocus.de/archives/2008/01/22/time-in-your-life/][Dominik Schwinds Weblog]] aus dem Jahr 2008.


# A list of fonts to choose from, with their relative sizes
fontlist = [
            'Swift',
            'Junkyard',
            'Penguin Attack',
            'Domestic Manners',
           ]

require 'net/http'
require 'RMagick'
include Magick

# Get artist name, album title and image
good = false
while not good
  good = true
  artist = Net::HTTP.get_response(URI("http://en.wikipedia.org/wiki/Special:Random"))['location']
  artist = artist["http://en.wikipedia.org/wiki/".length...artist.length]
  artist = artist.sub(/[,(].*$/, '').gsub(/_/, ' ',)
  if (artist.start_with?("List of ")) then good = false; end
  if (artist[0].ord >= '0'.ord && artist[0].ord <= '9'.ord) then good = false; end
end
album = Net::HTTP.get(URI("http://www.quotationspage.com/random.php3"))
album = album[album.rindex('<dt class="quote">')+18...album.rindex('</dt>')]
album = album.match(/( [^ ]*){4}<\/a>/)[0]
album = album[1..album.length-6]
# Filter out unfitting first words
good = false
while not good
  good = true
  for word in ["It", "it", "is", "them", "of", "that", "than", "are", "were", "be", "can", "me", "or"]
    if album.start_with?(word+" ")
      album = album[(word.length()+1)..-1]
      good = false
    end
  end
end

image_url = Net::HTTP.get(URI("https://www.flickr.com/explore/interesting/7days/"))
image_url_idx = image_url.index('<a href="/photos/')
image_url = image_url.match(/<a data-track="thumb".*<\/a>/)[0] # find the first image
image_url = image_url.match(/img src=\"[^\"]*\"/)[0]           # locate the image URL
image_url = image_url[9..image_url.length-2]
image_url = image_url.sub('_m.jpg', '.jpg')                    # we don't want the thumbnail, but the full image
image = Net::HTTP.get(URI(image_url))                          # download and save it
File.new("album.jpg", "w").write(image)

# Prepare image comment
comment = "Generated by Album Cover Generator, written 2013 by Hendrik Radke.\n"
comment+= "Idea by Dominik Schwind, http://www.lostfocus.de/archives/2008/01/22/time-in-your-life/"
comment+= "Image used: "+ image_url

puts " ... building."
# Load image and position it in a rectangular border
img = ImageList.new("album.jpg").cur_image
if (img.rows > img.columns)
  # too slim images might be positioned on the left or right border, or in the middle
  img2 = Image.new(img.rows, img.rows) {
    self.background_color = 'black'
    self.comment = comment
  }
  rnd = rand()
  if    (rnd <= 0.4) # Position image left
      img2.composite!(img, 0, 0, AddCompositeOp)
  elsif (rnd <= 0.8) # Position image right
      img2.composite!(img, img.rows-img.columns, 0, AddCompositeOp)
  else #(rnd <= 1.0) # Position image middle
    img2.composite!(img, (img.rows-img.columns)/2, 0, AddCompositeOp)
  end
elsif (img.columns > img.rows)
  # too wide images are centered.
  img2 = Image.new(img.columns, img.columns) {
    self.background_color = 'black'
    self.comment = comment
  }
  img2.composite!(img, 0, (img.columns-img.rows)/2, AddCompositeOp)
else
  # for perfectly square images
  img2 = Image.new(img.columns, img.rows)  {
    self.background_color = 'black'
    self.comment = comment
  }
  img2.composite!(img, 0, 0, AddCompositeOp)
end

MIN_FONTSIZE=8
MAX_FONTSIZE=50
# TODO: Sometimes goes into an endless loop.
def adjust_fontsize(text, font, maxwidth, minwidth=0)
  d = Draw.new
  fontsize = MAX_FONTSIZE
  resize_step = ((MAX_FONTSIZE-MIN_FONTSIZE)/2)
  width = -1
  while (width < minwidth or width > maxwidth)
    d.font_family = font;
    d.pointsize = fontsize;
    cwidth = d.get_type_metrics(text).width
    #puts "fontsize #{fontsize} yields width #{cwidth}."
    if (cwidth > maxwidth) then fontsize -= resize_step; resize_step/=1.5; next; end
    if (cwidth < minwidth) then fontsize += resize_step; resize_step/=1.5; next; end
    if (fontsize > MAX_FONTSIZE) then fontsize = MAX_FONTSIZE; end
    if (fontsize < MIN_FONTSIZE) then fontsize = MIN_FONTSIZE; end
    break;
  end
  return fontsize
end

# todo: different random-weights for fonts?
albumfont  = fontlist[rand*fontlist.size]
artistfont = fontlist[rand*fontlist.size]

albumfontsize  = adjust_fontsize(album, albumfont, img2.columns * 0.9, img2.columns * 0.3)
artistfontsize = adjust_fontsize(artist, artistfont, img2.columns * 0.9, img2.columns * 0.4)

d = Draw.new
d.annotate(img2, 0,0,4,8, album) {
    self.font_family = albumfont
    self.fill = 'white'
    self.stroke = 'transparent'
    self.pointsize = albumfontsize
    self.font_weight = NormalWeight
    self.gravity = NorthEastGravity
}

d.annotate(img2, 0,0,0,8, artist) {
    self.font_family = artistfont
    self.fill = 'white'
    self.stroke = 'white'
    self.pointsize = artistfontsize
    self.font_weight = BoldWeight
    self.gravity = SouthGravity
}

img2.write("album.jpg")
